#!/usr/bin/env python

import sysman.client,sysman.confhandler,sysman.commandoptions

from sysman.colours import red_bold,blue_bold,green_bold,bold
from sysman.colours import green_bold_reverse,yellow_bold

import re,os
from subprocess import call

NOTSAVED = 0
SAVED = 1
NOFILE = 2

commopt = sysman.commandoptions.Commandoptions()
defaultport = commopt.options.port
conffile = commopt.options.conffile
sysscfg = sysman.confhandler.Configuration(conffile)
statusmsg = ''
#global activesys
if sysscfg.is_config_available(conffile):
    saved = SAVED
    sysscfg.load_conf()
else:
    saved = NOFILE

# TEST PORPOSE

#serverport = 61874
#servername = socket.gethostname()
#if servername == 'Giove':
#    systems = sysman.confhandler.Configuration('/home/fabrizio/APPO/bck/sysmand.xml.save')
#elif servername == 'D03':
#    systems = sysman.confhandler.Configuration('/home/frosa/APPO/bck/sysmand.xml.save')
#systems.load_conf()
#ucraina = systems.get_system('Ucraina')

#print 'Starting connection to server ' + servername + ' at port ' + str(serverport)
# TEST PORPOSE END

#print 'Type \'help\' for command list. Type \'quit\' to end session'

def query(servername,serverport,comm):
#        match = re.match('^(.+):(.+)$',comm)
#        if not match:
#            comm = comm + ':nop'
    connection = sysman.client.Client(servername,serverport)
    info = re.sub('[\n\r]','',connection.query(comm))
    connection.socket().close()
    return info

def io():
    global statusmsg
    if not saved == NOFILE:
        statusmsg = 'Config file available: ' + conffile
    else:
        statusmsg = 'Config file not available'
    commandlist = []
    new_comm('open system',open_sys,commandlist)
    new_comm('edit system',add_node_to_sys,commandlist)
    new_comm('create system',create_sys,commandlist)
    new_comm('update system',create_sys,commandlist,[True])
    new_comm('delete system',delete_sys,commandlist)
    new_comm('load configuration from file',load_file,commandlist)
    new_comm('save configuration',save_conf,commandlist)
    while True:
        comm = menu('Main Menu',commandlist,clean=1)
        if comm == 'q':
            if saved == NOTSAVED:
                clscr()
                rep = prompt(red_bold('The actual configuration'\
                                      ' is not saved.\n') +
                blue_bold(' Do you want to save it before to proceed?'),
                ['y','n'],1)
                if rep == 'y':
                    save_conf()
            break
    print 'Bye!'

def head(title):
    global statusmsg
    head =  '\n\n\n:::: '+ red_bold('SysMan System Management') + ' ::::\n\n'
    head = head + ' :: ' + yellow_bold(statusmsg) + ' ::\n\n'
    head = head + sub_head() +'\n'
    head = head + ' ::  ' + green_bold_reverse(title) + '  ::\n\n'
    return head
    
def sub_head():
    global activesys,activenode,activeexe,saved,conffile
    try:
        sysname = bold(activesys.get_system_name()) + '\n'
    except NameError:
        sysname = '\n'
    try:
        nodename = bold(activenode.get_node_name()) + '\n'
    except NameError:
        nodename = '\n'
    try:
        exename = bold(activeexe.get_exec_name()) + '\n'
    except NameError:
        exename = '\n'
    conf = ' :: ' + yellow_bold('Configuration file : ')
    syst = ' :: ' + yellow_bold('System loaded      : ')
    node = ' :: ' + yellow_bold('Node loaded        : ')
    exe = ' :: ' + yellow_bold('Executable loaded  : ')
    if saved == NOFILE:
        filename = '\n'
    elif saved == SAVED:
        filename = conffile + '\n'
    elif saved == NOTSAVED:
        filename = bold(conffile + '*\n')
    return conf + filename + syst + sysname + node + nodename + exe + exename
        
    
def prompt(pr,keys=[],pk=0):
    ret = pr.count('\n') + 4
    rep = ''
    ks = ''
    if not len(keys) == 0:
        if pk:
            for k in keys:
                ks = ks + k + '/'
            ks = '(' + ks.rstrip('/') + ')'
            pr = '\n' + pr + ' ' + green_bold(ks) +\
                 ' :: ' + bold('>') + ' \033[0J'
        else:
            pr = '\n' + pr + ' :: ' + bold('>') + ' \033[0J'
        print ''
        rep = str(raw_input(pr))
        while not rep in keys:
            print '\033[%dF' % ret
            print bold (rep) + red_bold(' is not a valid option')
            rep = str(raw_input(pr))
    else:
        pr = '\n' + pr + ' :: ' + bold('>') + ' \033[0J'
        print ''
        rep = str(raw_input(pr))
        while rep == '' and not pk:
            print '\033[%dF' % ret
            print red_bold('Empty string is not allowed')
            rep = str(raw_input(pr))
    return rep

def clscr():
    call(['/usr/bin/clear'])

def menu(title,commandlist,quitable=1,backable=0,clean=0):
    command = {}
    arguments = {}
    menu = head(title)
    for quadruple in commandlist:
        act,expl,func,args = quadruple
        menu = menu + ' :: ' + green_bold(act + ') ' + expl) + '\n'
        command[act] = func
        arguments[act] = args
    if quitable:
        menu = menu + ' :: ' + blue_bold('q) quit') + '\n'
        command['q'] = quit_menu
        arguments['q'] = []
    if backable:
        menu = menu + ' :: ' + blue_bold('b) back') + '\n'
        command['b'] = back_menu
        arguments['b'] = []
    if clean:
        clscr()
    print menu
    while True:
        repl = prompt(red_bold('SM'),command.keys(),0)
        if repl in command:
            if len(arguments[repl]) == 0:
                return command[repl]()
            else:
                return command[repl](arguments[repl])

def null():
    pass

def act_char(title,commandlist):
    lowerchars = 'acdefghijklmnoprstuvwxyz'
    upperchars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    numbers = '0123456789'
    allchars = lowerchars + upperchars + numbers
    title = title.replace(' ','')
    titler = title.replace('b','')
    titler = titler.replace('q','')
    allpossible = titler + title.upper() + allchars
    for c in allpossible:
        if len(commandlist) == 0:
            return c
        else:
            trovato = False
            for comm in commandlist:
                if c == str(comm[0]):
                    trovato = True
            if not trovato:
                return c
        
def new_comm(title,function,commandlist,arguments=[]):
    act = act_char(title,commandlist)
    return commandlist.append((act,
                               title,
                               function,
                               arguments))

def open_sys():
    global statusmsg,activesys
    title = 'Open System'
    if saved == NOFILE:
        statusmsg = 'Config file not available'
    elif len(sysscfg.get_systems_list()) == 0:
        statusmsg = 'No system available'
    else:
        commandlist = []
        for system in sysscfg.get_systems_list():
            name = system.get_system_name()
            new_comm(name,load_sys,commandlist,[name])
        menu(title,commandlist,quitable=0,backable=1,clean=1)
    return 'b'

def add_node_to_sys():
    title = 'Edit System'
    commandlist = []
    new_comm('open node',open_node,commandlist)
    new_comm('edit node',edit_node,commandlist)
    new_comm('create node',create_node,commandlist)
    new_comm('update node',update_node,commandlist)
    new_comm('delete node',delete_node,commandlist)
    new_comm('save configuration',save_conf,commandlist)
    clscr()
    print menu(title,commandlist,quitable=0,backable=1,clean=1)
    return 'b'

def create_sys(update=False):
    global statusmsg,saved,sysscfg
    oldmsg = statusmsg
    statusmsg = 'Fields with (*) symbol are mandatory'
    create = 0
    systemname = systemdesc = name = ''
    if update:
        title = 'Update System Informations'
        try:
            systemname = activesys.get_system_name()
        except NameError:
            pass 
    else:
        title = 'Create New System'
    while True:
        clscr()
        print head(title)
        while name == '':
            if systemname == '':
                emptyok = 0
            else:
                emptyok = 1
            name = prompt(blue_bold('Insert system name (*) [') +
                          bold(systemname) + 
                          blue_bold(']'),pk=emptyok)
            if not name == '':
                systemname = name
            elif not systemname == '':
                name = systemname
        systemdesc = prompt(blue_bold('Insert a system description'),pk=1)
        rep = prompt(red_bold('About to create a new system (insert' +\
                              ' \'q\' to exit):') +\
                     '\n' +\
                     blue_bold('  Name: ') +\
                     bold(systemname) +\
                     '\n' +\
                     blue_bold('  Description: ') +\
                     bold(systemdesc) +\
                     '\n' +\
                     blue_bold('Is this correct?'),['y','n','q'],1).lower()[0]
        if rep == 'y':
            create = 1
            if update:
                try:
                    rm_sys([activesys.get_system_name()])
                except NameError:
                    pass
            else:
                for system in sysscfg.get_systems_list():
                    if system.get_system_name() == systemname:
                        # Found system with same name. Ask to remove
                        rep = prompt(red_bold('System ') +\
                                     bold(systemname) +\
                                     red_bold(' already exist.\n') +\
                                     blue_bold('Do you want to overwrite' +\
                                               ' the old one?'),['y','n'],1)
                        if rep == 'y':
                            # Remove the old system 
                            rm_sys([systemname])
                        else:
                            create = 0
                            statusmsg = 'System not overwritten'
                        break
            if create:
                break
        elif rep == 'q':
            break
        else:
            statusmsg = 'Something wrong?'
        name = ''
    if create:
        saved = NOTSAVED
        sys = sysman.system.System(systemname,systemdesc)
        sysscfg.add_system(sys)
        if update:
            load_sys([systemname])
            statusmsg = 'System %s updated' % systemname
        else:
            statusmsg = 'System %s created' % systemname
    else:
        statusmsg = oldmsg
    return 'b'
    
def delete_sys():
    global activesys,statusmsg,saved,sysscfg
    title = 'Remove a System'
#    oldmsg = statusmsg
    if saved == NOFILE:
        statusmsg = 'Config file not available'
    else:
        commandlist = []
        for system in sysscfg.get_systems_list():
            name = system.get_system_name()
            new_comm(name,rm_sys,commandlist,[name])
        menu(title,commandlist,quitable=0,backable=1,clean=1)
    return 'b'
    
def save_conf():
    global sysscfg,statusmsg,conffile,saved
    newconffile = ''
    title = 'Save Configuration'
    clscr()
    print head(title)
    save = False
    rep = prompt(red_bold('About to save actual configuration:\n') +\
                 blue_bold(' Do you want to use the file \"') +\
                 bold(conffile) +\
                 blue_bold('\"?'),['y','n'],1)
    if rep == 'n':
        while True: 
            newconffile = prompt(blue_bold('Insert the filename:'))
            if os.path.dirname(newconffile) == '':
                newconffile = os.getcwd() + os.sep + newconffile
            if os.access(os.path.dirname(newconffile),os.F_OK):
                if os.access(os.path.dirname(newconffile),os.W_OK):
                    if os.access(newconffile, os.F_OK):
                        rep = prompt(red_bold('The file already exists.\n') +\
                                     blue_bold(' Do you want to overwrite it?'),
                                     ['y','n'],1)
                        if rep == 'y':
                            save = True
                            break
                    else:
                        save = True
                        break
                else:
                    prompt(red_bold('It\'s not possible to access the' +\
                                    ' directory \"') +
                           bold(os.path.dirname(newconffile)) +
                           blue_bold(' You need to change path'))
            else:
                rep = prompt(red_bold('The directory \"') +
                             bold(os.path.dirname(newconffile)) +
                             red_bold('\" does not exists.\n') +
                             blue_bold(' Do you want to create it?'),
                             ['y','n'],1)
                if rep == 'y':
                    os.makedirs(os.path.dirname(newconffile))
                    save = True
                    break
    else:
        newconffile = conffile
        save = True
    if save:
        conffile = newconffile
        sysscfg.save(conffile)
        statusmsg = 'Configuration saved'
        saved = SAVED
    return 'b'
    
def load_file():
    global conffile,sysscfg,statusmsg,saved
    title = 'Load Configuration File'
    clscr()
    print head(title)
    if saved == NOTSAVED:
        rep = prompt(red_bold('The actual configuration is not saved.\n') +
                     blue_bold(' Do you want to save it before to proceed?'),
                     ['y','n'],1)
        if rep == 'y':
            save_conf()
    newconffile = prompt(red_bold('About to load a configuration file:\n') +
                         blue_bold(' Insert the filename:'))
    if os.access(newconffile, os.R_OK):
        conffile = newconffile
        sysscfg = sysman.confhandler.Configuration(conffile)
        sysscfg.load_conf()
        statusmsg = 'Configuration loaded'
        saved = SAVED
    else:
        statusmsg = 'Configuration file not found'

def create_node():
    return 'b'

def open_node():
    return 'b'

def edit_node():
    return 'b'

def update_node():
    return 'b'

def delete_node():
    return 'b'

def quit_menu():
    return 'q'

def back_menu():
    return 'b'

def load_sys(namelist):
    global activesys,statusmsg
    if len(namelist) == 1:
        activesys = sysscfg.get_system(namelist[0])
        statusmsg = 'System %s loaded' % namelist[0]
    return 'b'

def rm_sys(namelist):
    global sysscfg,activesys,saved,statusmsg
    if len(namelist) == 1:
        try:
            if activesys.get_system_name() == namelist[0]:
                del activesys
        except NameError:
            pass 
        sysscfg.remove_system(namelist[0])
        statusmsg = 'System %s removed' % namelist[0]
        saved = NOTSAVED
    return 'b'

io()
#pkucraina = cPickle.dumps(ucraina)
#print pkucraina
#info = re.sub('[\n\r]','',connection.query('set_conf:%s\n*DONE\n' % pkucraina))
#print info
#io()
#connection.socket().close()